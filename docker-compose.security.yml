# Security-hardened Docker Compose configuration for Quantum MLOps
version: '3.8'

services:
  quantum-mlops:
    build:
      context: .
      target: secure-production  # Use security-hardened image
    container_name: quantum-mlops-secure
    
    # Security: Run as non-root user
    user: "1000:1000"
    
    # Security: Drop all capabilities and add only necessary ones
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE  # Only if binding to privileged ports
    
    # Security: Read-only root filesystem
    read_only: true
    
    # Security: Prevent privilege escalation
    security_opt:
      - no-new-privileges:true
    
    # Security: Use custom AppArmor/SELinux profile if available
    # security_opt:
    #   - apparmor:quantum-mlops-profile
    
    # Security: Limit resources to prevent DoS
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
          # pids: 100  # Limit number of processes
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Security: Temporary filesystems for writable directories
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
      - /home/quantum/.quantum_mlops/logs:noexec,nosuid,size=100m
      - /home/quantum/.quantum_mlops/cache:noexec,nosuid,size=200m
    
    # Security: Environment variables
    environment:
      - QUANTUM_ENVIRONMENT=production
      - SSL_REQUIRED=true
      - AUDIT_LOGGING_ENABLED=true
      - CIRCUIT_VALIDATION_ENABLED=true
      - DATA_ENCRYPTION_ENABLED=true
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    
    # Security: Secrets management (use Docker secrets in production)
    secrets:
      - jwt_secret_key
      - encryption_master_key
      - db_password
    
    # Security: Expose minimal ports
    ports:
      - "8000:8000"
    
    # Security: Networks
    networks:
      - quantum-internal
      - quantum-external
    
    # Security: Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import quantum_mlops; exit(0)"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 30s
    
    # Security: Restart policy
    restart: unless-stopped
    
    # Dependencies
    depends_on:
      quantum-db:
        condition: service_healthy
      quantum-redis:
        condition: service_healthy

  quantum-db:
    image: postgres:15-alpine
    container_name: quantum-db-secure
    
    # Security: Run as non-root user
    user: "999:999"  # postgres user
    
    # Security: Drop capabilities
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    
    # Security: Read-only root filesystem
    read_only: true
    
    # Security: Prevent privilege escalation
    security_opt:
      - no-new-privileges:true
    
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Security: Temporary filesystems
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=10m
    
    # Security: Environment variables
    environment:
      - POSTGRES_DB=quantum_mlops
      - POSTGRES_USER_FILE=/run/secrets/db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    
    # Security: Secrets
    secrets:
      - db_user
      - db_password
    
    # Security: Volumes with restricted permissions
    volumes:
      - quantum_db_data:/var/lib/postgresql/data:Z
    
    # Security: Internal network only
    networks:
      - quantum-internal
    
    # Security: Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    restart: unless-stopped

  quantum-redis:
    image: redis:7-alpine
    container_name: quantum-redis-secure
    
    # Security: Run as non-root user
    user: "999:999"  # redis user
    
    # Security: Drop capabilities
    cap_drop:
      - ALL
    
    # Security: Read-only root filesystem
    read_only: true
    
    # Security: Prevent privilege escalation
    security_opt:
      - no-new-privileges:true
    
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Security: Temporary filesystems
    tmpfs:
      - /tmp:noexec,nosuid,size=10m
      - /var/lib/redis:noexec,nosuid,size=100m
    
    # Security: Redis configuration
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --bind 0.0.0.0
      --port 6379
      --tcp-keepalive 60
      --timeout 300
    
    # Security: Environment variables
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    
    # Security: Secrets
    secrets:
      - redis_password
    
    # Security: Internal network only
    networks:
      - quantum-internal
    
    # Security: Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    
    restart: unless-stopped

  # Security: Nginx reverse proxy with TLS termination
  quantum-proxy:
    image: nginx:1.25-alpine
    container_name: quantum-proxy-secure
    
    # Security: Run as non-root user
    user: "101:101"  # nginx user
    
    # Security: Drop capabilities
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    # Security: Read-only root filesystem
    read_only: true
    
    # Security: Prevent privilege escalation
    security_opt:
      - no-new-privileges:true
    
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 32M
    
    # Security: Temporary filesystems
    tmpfs:
      - /tmp:noexec,nosuid,size=10m
      - /var/cache/nginx:noexec,nosuid,size=50m
      - /var/run:noexec,nosuid,size=10m
    
    # Security: Configuration
    configs:
      - source: nginx_config
        target: /etc/nginx/nginx.conf
      - source: nginx_security_headers
        target: /etc/nginx/conf.d/security-headers.conf
    
    # Security: TLS certificates
    secrets:
      - source: tls_cert
        target: /etc/ssl/certs/quantum_mlops.crt
      - source: tls_key
        target: /etc/ssl/private/quantum_mlops.key
    
    # Security: Expose HTTPS port only
    ports:
      - "443:443"
      - "80:80"  # For redirect to HTTPS
    
    networks:
      - quantum-external
    
    # Security: Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    
    depends_on:
      - quantum-mlops
    
    restart: unless-stopped

# Security: Network segmentation
networks:
  quantum-internal:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  quantum-external:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Security: Persistent volumes
volumes:
  quantum_db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/quantum-mlops/data/db

# Security: Secrets management
secrets:
  jwt_secret_key:
    file: ./secrets/jwt_secret_key.txt
  encryption_master_key:
    file: ./secrets/encryption_master_key.txt
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  tls_cert:
    file: ./secrets/tls/quantum_mlops.crt
  tls_key:
    file: ./secrets/tls/quantum_mlops.key

# Security: Configuration files
configs:
  nginx_config:
    file: ./config/nginx/nginx.conf
  nginx_security_headers:
    file: ./config/nginx/security-headers.conf