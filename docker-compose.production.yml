version: '3.8'

services:
  quantum-mlops-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app/src
      - LOG_LEVEL=info
      - QUANTUM_BACKENDS=simulator,aws_braket
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://quantum:quantum@postgres:5432/quantum_mlops
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./logs:/app/logs
      - quantum_models:/app/models
    depends_on:
      - redis
      - postgres
      - mlflow
    restart: unless-stopped
    networks:
      - quantum-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.quantum-api.rule=Host(`api.quantum-mlops.example.com`)"
      - "traefik.http.services.quantum-api.loadbalancer.server.port=8000"
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  quantum-mlops-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app/src
      - LOG_LEVEL=info
      - WORKER_TYPE=quantum
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://quantum:quantum@postgres:5432/quantum_mlops
    volumes:
      - ./logs:/app/logs
      - quantum_models:/app/models
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - quantum-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  quantum-mlops-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: scheduler
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app/src
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://quantum:quantum@postgres:5432/quantum_mlops
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - quantum-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - quantum-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=quantum_mlops
      - POSTGRES_USER=quantum
      - POSTGRES_PASSWORD=quantum
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/quantum_mlops/database/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - quantum-network

  mlflow:
    image: python:3.9-slim
    command: >
      bash -c "pip install mlflow psycopg2-binary boto3 &&
               mlflow server --host 0.0.0.0 --port 5000 
               --backend-store-uri postgresql://quantum:quantum@postgres:5432/mlflow
               --default-artifact-root s3://quantum-mlops-artifacts"
    ports:
      - "5000:5000"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - quantum-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - quantum-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=quantum123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - quantum-network

  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=admin@quantum-mlops.example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    restart: unless-stopped
    networks:
      - quantum-network

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  quantum_models:
  letsencrypt:

networks:
  quantum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16